from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext

from keyboard.reply_kb import MainKb
from utils.handlers_util import send_voice_message, get_form_id
from utils.lexicon import text, BUTTONS, COMPANY
from services.forms import ya_forms
# from config import config
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    # if command.args:
    #     await another_algorithm(form_id=command.args)
    #     –µ—Å–ª–∏ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ f'https://t.me/{me.username}?start={form_id}'
    #     –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ —É–∂–µ –∏–¥—É—Ç –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ñ–æ—Ä–º—ã
    await send_voice_message(message, text['help'],'help.wav', BUTTONS['start'])


@router.message(F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
async def continue_handler(message: Message):
    await send_voice_message(message, text['instruction'],'instruction.wav', BUTTONS['forms'])


@router.message(F.text == '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
async def privacy_handler(message: Message):
    await send_voice_message(message, text['privacy'],'privacy.wav', BUTTONS['forms'])


@router.message(F.text.contains('forms.yandex.ru'))
async def get_url_handler(message: Message, state: FSMContext):
    me = await message.bot.get_me()
    form_id = get_form_id(message.text)

    await state.update_data(form_id=form_id)

    await message.answer(
        f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/{me.username}?start={form_id}',
        reply_markup=MainKb(BUTTONS['forms']).get_keyboard()
    )


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É')
async def create_form_handler(message: Message):
    await message.answer(text=text['primer'])


@router.message(F.text == '–î–∞')
async def forms_question_handler(message: Message):
    # —Ç—É—Ç –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ—à–∞–≥–æ–≤–æ
    pass


@router.message(F.text == '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É')
async def get_form_handler(message: Message, state: FSMContext):
    form_id = state.get_data('form_id')
    form_data = await ya_forms.get_form_data(form_id)

    response_text = (
        f"üìã –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–æ—Ä–º—É \"{form_data.name}\"\n"
        f"üè¢ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {COMPANY}'\n"
        f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {ya_forms.questions_count(form_data)}\n"
        f"\n–í–æ–ø—Ä–æ—Å—ã:\n"
    )

    question_number = 1
    for page in form_data.pages:
        for item in page.items:
            response_text += f"‚Ä¢ {item.label}\n"
            question_number += 1

    await state.update_data(form_data=form_data)

    await message.answer(
        text=response_text,
        reply_markup=MainKb(['–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']).get_keyboard()
    )

@router.message(F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É')
async def start_form_filling(message: Message, state: FSMContext):
    await message.answer(
        text="üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã!",
        reply_markup=MainKb(['–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å']).get_keyboard()
    )
