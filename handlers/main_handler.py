from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext

from keyboard.reply_kb import MainKb
from utils.handlers_util import send_voice_message, get_form_id
from utils.constants import (INSTRUCTION_TEXT, HELP_TEXT, PRIVACY_TEXT,
                             FORM_EXAMPLE, PLEASE_COMPLETE,
                             REQUIRED_FIELD, BUTTONS, COMPANY)
from services.forms import ya_forms
from services.models import FormItem
from utils.form_utils import (FormNavigation,
                              format_question_text,
                              create_answer_structure,
                              format_confirmation_message,
                              get_keyboard_for_question,
                              get_intro_form_header,
                              is_required)
from states.states import FormFilling


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    # if command.args:
        # form_id = command.args
        # await get_form_handler(form_id)

    await send_voice_message(message, HELP_TEXT,
                             'help.wav', BUTTONS['start'])


@router.message(F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
async def continue_handler(message: Message):
    await send_voice_message(message, INSTRUCTION_TEXT,
                             'instruction.wav', BUTTONS['forms'])


@router.message(F.text == '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
async def privacy_handler(message: Message):
    await send_voice_message(message, PRIVACY_TEXT,
                             'privacy.wav', BUTTONS['forms'])


@router.message(F.text.contains('forms.yandex.ru'))
async def get_url_handler(message: Message, state: FSMContext):
    me = await message.bot.get_me()
    form_id = get_form_id(message.text)

    await state.update_data(form_id=form_id)

    await message.answer(
        f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/{me.username}?start={form_id}',
        reply_markup=MainKb(BUTTONS['forms']).get_keyboard()
    )


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É')
async def create_form_handler(message: Message):
    await message.answer(text=FORM_EXAMPLE)


@router.message(F.text == '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É')
async def get_form_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    form_id = data.get('form_id')
    form_data = await ya_forms.get_form_data(str(form_id))
    form_nav = FormNavigation(form_data)

    response_text = get_intro_form_header(
        title=form_data.name,
        company=COMPANY,
        questions_count=form_nav.get_total_questions()
    )

    question_number = 1
    for page in form_data.pages:
        for item in page.items:
            if not item.hidden:
                response_text += f'{question_number}. {item.label}'
                if item.validations and is_required(item.validations):
                    response_text += REQUIRED_FIELD
                response_text += '\n'
                if item.comment:
                    response_text += f'<i>{item.comment}</i>\n'
                response_text += '\n'
                question_number += 1
    response_text += PLEASE_COMPLETE
    await state.update_data(form_data=form_data)

    await send_voice_message(
        message, response_text,
        f'{form_data.name}.wav',
        BUTTONS['form_intro']
    )


@router.message(F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É')
async def start_form_filling(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    data = await state.get_data()
    form_data = data.get('form_data')

    if not form_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–µ
    form_nav = FormNavigation(form_data)
    current_question = form_nav.get_current_question()

    if not current_question:
        await message.answer("–í —Ñ–æ—Ä–º–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
        return

    page_idx, item_idx, question_item = current_question

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    await state.update_data(
        answers={},
        form_navigation={
            'current_index': 0,
            'total_questions': form_nav.get_total_questions(),
            'question_ids': [q[2].id for q in form_nav.visible_questions]
        }
    )

    await state.set_state(FormFilling.waiting_for_answers)

    question_text = format_question_text(
        question_item,
        1,
        form_nav.get_total_questions()
    )

    keyboard = get_keyboard_for_question(True, False)

    await message.answer(
        text=f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã!\n\n{question_text}",
        reply_markup=MainKb(keyboard).get_keyboard()
    )


@router.message(FormFilling.waiting_for_answers, F.text)
async def process_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    form_data = data.get('form_data')
    answers = data.get('answers', {})
    nav_data = data.get('form_navigation', {})

    current_index = nav_data.get('current_index', 0)
    total_questions = nav_data.get('total_questions', 0)
    question_ids = nav_data.get('question_ids', [])

    if current_index >= len(question_ids):
        await message.answer("–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question_id = question_ids[current_index]
    current_question = None
    for page in form_data.pages:
        for item in page.items:
            if item.id == current_question_id:
                current_question = item
                break
        if current_question:
            break

    if not current_question:
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    processed_answer = await process_user_answer(message.text,
                                                 current_question)
    if processed_answer is None:
        # –û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ –≤–æ–ø—Ä–æ—Å–µ
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers[current_question_id] = processed_answer

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    next_index = current_index + 1
    await state.update_data(answers=answers)

    if next_index < total_questions:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        nav_data['current_index'] = next_index
        await state.update_data(form_navigation=nav_data)

        next_question_id = question_ids[next_index]
        next_question = None
        for page in form_data.pages:
            for item in page.items:
                if item.id == next_question_id:
                    next_question = item
                    break
            if next_question:
                break

        question_text = format_question_text(
            next_question,
            next_index + 1,
            total_questions
        )

        is_last = next_index == total_questions - 1
        keyboard = get_keyboard_for_question(False, is_last)

        await message.answer(
            text=f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n{question_text}",
            reply_markup=MainKb(keyboard).get_keyboard()
        )

    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.set_state(FormFilling.confirmation)

        confirmation_text = await format_confirmation_message(
            form_data, answers
        )

        await message.answer(
            text=confirmation_text,
            reply_markup=MainKb(['–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']).get_keyboard()
        )


async def process_user_answer(user_input: str, question: FormItem):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if question.type == 'enum' and question.items:
        # –í–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞
        try:
            choice_index = int(user_input) - 1
            if 0 <= choice_index < len(question.items):
                return [question.items[choice_index].id]
            else:
                return None
        except ValueError:
            return None

    elif question.type == 'string':
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        return user_input.strip()

    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    return user_input


@router.message(FormFilling.waiting_for_answers, F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç')
async def change_previous_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    nav_data = data.get('form_navigation', {})

    current_index = nav_data.get('current_index', 0)
    total_questions = nav_data.get('total_questions', 0)
    question_ids = nav_data.get('question_ids', [])

    if current_index > 0:
        nav_data['current_index'] = current_index - 1
        await state.update_data(form_navigation=nav_data)

        form_data = data.get('form_data')
        prev_question_id = question_ids[current_index - 1]
        prev_question = None

        for page in form_data.pages:
            for item in page.items:
                if item.id == prev_question_id:
                    prev_question = item
                    break
            if prev_question:
                break

        question_text = format_question_text(
            prev_question,
            current_index,  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π
            total_questions
        )

        is_last = current_index - 1 == total_questions - 1
        keyboard = get_keyboard_for_question(current_index - 1 == 0, is_last)

        await message.answer(
            text=f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:\n\n{question_text}",
            reply_markup=MainKb(keyboard).get_keyboard()
        )
    else:
        await message.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")


@router.message(FormFilling.waiting_for_answers, F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã')
async def show_all_answers_preview(message: Message, state: FSMContext):
    data = await state.get_data()
    form_data = data.get('form_data')
    answers = data.get('answers', {})

    confirmation_text = await format_confirmation_message(form_data, answers)

    await message.answer(
        text=confirmation_text,
        reply_markup=MainKb(['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']).get_keyboard()
    )


@router.message(FormFilling.waiting_for_answers, F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ')
async def continue_filling(message: Message, state: FSMContext):
    data = await state.get_data()
    nav_data = data.get('form_navigation', {})
    form_data = data.get('form_data')

    current_index = nav_data.get('current_index', 0)
    total_questions = nav_data.get('total_questions', 0)
    question_ids = nav_data.get('question_ids', [])

    current_question_id = question_ids[current_index]
    current_question = None

    for page in form_data.pages:
        for item in page.items:
            if item.id == current_question_id:
                current_question = item
                break
        if current_question:
            break

    question_text = format_question_text(
        current_question,
        current_index + 1,
        total_questions
    )

    is_last = current_index == total_questions - 1
    keyboard = get_keyboard_for_question(False, is_last)

    await message.answer(
        text=f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:\n\n{question_text}",
        reply_markup=MainKb(keyboard).get_keyboard()
    )


@router.message(FormFilling.confirmation, F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
async def send_results(message: Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get('answers', {})
    form_data = data.get('form_data')
    form_id = data.get('form_id')

    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
        structured_answers = create_answer_structure(form_data, answers)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º—ã
        success = await ya_forms.fill_the_form(str(form_id),
                                               structured_answers)

        if success:
            await message.answer(
                "‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                reply_markup=MainKb(BUTTONS['start']).get_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã",
                reply_markup=MainKb(BUTTONS['start']).get_keyboard()
            )

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}",
            reply_markup=MainKb(BUTTONS['start']).get_keyboard()
        )

    finally:
        await state.clear()


@router.message(FormFilling.confirmation, F.text == '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
async def restart_form(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await state.update_data(answers={})

    data = await state.get_data()
    form_data = data.get('form_data')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    form_nav = FormNavigation(form_data)
    current_question = form_nav.get_current_question()

    page_idx, item_idx, question_item = current_question

    await state.update_data(
        form_navigation={
            'current_index': 0,
            'total_questions': form_nav.get_total_questions(),
            'question_ids': [q[2].id for q in form_nav.visible_questions]
        }
    )

    await state.set_state(FormFilling.waiting_for_answers)

    question_text = format_question_text(
        question_item,
        1,
        form_nav.get_total_questions()
    )

    await message.answer(
        text=f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–Ω–æ–≤–æ!\n\n{question_text}",
        reply_markup=MainKb(['–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É']).get_keyboard()
    )
