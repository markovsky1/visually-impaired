import asyncio
from services.forms import YandexForms
from config import config

from pprint import pprint

survey = config.TEST_FORM_ID

answers = {
    "answer_choices_136023": ["237802"],
    "answer_choices_136025": ["240975"],
    "answer_choices_136028": ["237808"],
    "answer_choices_136031": ["237817"],
    "answer_choices_136032": [
        "237819",
        "237820",
        "237825",
        "237827",
        "237831"
    ],
    "answer_short_text_136037": "–ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç"
}


async def test_get_form_data():
    form_client = YandexForms()
    try:
        data = await form_client.get_form_data(survey)
        pprint(data)
        assert data is not None
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã: {e}")
        return False


async def test_fill_form():
    form_client = YandexForms()
    try:
        result = await form_client.fill_the_form(survey, answers)
        print("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result)
        assert result is True
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False


async def test_export_results_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞"""
    form_client = YandexForms()

    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
    print("=" * 40)

    try:
        print("1. –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        operation_id = await form_client._start_export(survey, 'csv')
        print(f"   Operation ID: {type(operation_id)}")

        if not operation_id:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å operation_id")
            return False

        print("2. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        finished = False
        attempts = 0
        max_attempts = 10000

        while not finished and attempts < max_attempts:
            attempts += 1
            finished = await form_client._check_finished(operation_id)
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempts}: —Å—Ç–∞—Ç—É—Å {'–≥–æ—Ç–æ–≤–æ' if finished else '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}")

            if not finished:
                await asyncio.sleep(2)

        if not finished:
            print("   ‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
            return False

        print("3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        result = await form_client._get_result(survey, operation_id)
        print(f"   –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(result) if result else 0} –±–∞–π—Ç")

        if result:
            # with open('export_debug.csv', 'wb') as f:
            #     f.write(result)
            # print("   ‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ export_debug.csv")
            try:
                preview = result.decode('utf-8')[:500]
                print(f"   –ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n{preview}")
            except:
                print("   –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ UTF-8")

            return True
        else:
            print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç–æ–π")
            return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False


async def run_tests():
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    tests = [
        test_get_form_data(),
        # test_fill_form(),
        # test_export_results_detailed()
    ]

    results = await asyncio.gather(*tests)
    if all(results):
        print("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")


asyncio.run(run_tests())
