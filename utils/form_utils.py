from typing import Dict, List, Tuple
from services.models import FormData, FormItem, Validation
# from aiogram.fsm.context import FSMContext


class FormNavigation:
    def __init__(self, form_data: FormData):
        self.form_data = form_data
        self.visible_questions = self._get_visible_questions()
        self.current_question_index = 0

    def _get_visible_questions(self) -> List[Tuple[int, int, FormItem]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        –≤ —Ñ–æ—Ä–º–∞—Ç–µ (page_index, item_index, item)
        """
        visible_questions = []
        for page_idx, page in enumerate(self.form_data.pages):
            for item_idx, item in enumerate(page.items):
                if not item.hidden:
                    visible_questions.append((page_idx, item_idx, item))
        return visible_questions

    def get_current_question(self) -> Tuple[int, int, FormItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        if self.current_question_index < len(self.visible_questions):
            return self.visible_questions[self.current_question_index]
        return None

    def get_next_question(self) -> Tuple[int, int, FormItem]:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ"""
        if self.current_question_index < len(self.visible_questions) - 1:
            self.current_question_index += 1
            return self.visible_questions[self.current_question_index]
        return None

    def get_previous_question(self) -> Tuple[int, int, FormItem]:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ"""
        if self.current_question_index > 0:
            self.current_question_index -= 1
            return self.visible_questions[self.current_question_index]
        return None

    def get_question_by_index(self, index: int) -> Tuple[int, int, FormItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.visible_questions):
            self.current_question_index = index
            return self.visible_questions[index]
        return None

    def is_last_question(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        return self.current_question_index == len(self.visible_questions) - 1

    def get_total_questions(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return len(self.visible_questions)


def is_required(validations: list[Validation]) -> bool:
    return any(item.type == 'required' for item in validations)


def format_question_text(question: FormItem, question_number: int,
                         total_questions: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"""
    is_required = any(validation.type == 'required' for validation in (
        question.validations or []))

    question_text = f"–í–æ–ø—Ä–æ—Å {question_number}/{total_questions}"
    if is_required:
        question_text += " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å)"
    question_text += f"\n{question.label}\n"

    if question.comment:
        question_text += f"<i>{question.comment}</i>\n"

    if question.type == 'enum' and question.items:
        question_text += "\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
        for i, option in enumerate(question.items, 1):
            question_text += f"{i}. {option.label}\n"
        question_text += "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"

    elif question.type == 'string':
        if question.multiline:
            question_text += "\n(–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)"
        else:
            question_text += "\n(–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç)"

    return question_text


def create_answer_structure(form_data: FormData, answers: Dict) -> Dict:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã"""
    result = {}

    for page in form_data.pages:
        for item in page.items:
            if not item.hidden and item.id in answers:
                if item.type == 'enum':
                    result[item.id] = {"choices": answers[item.id]}
                else:
                    result[item.id] = {"text": answers[item.id]}
    return result


async def format_confirmation_message(form_data: FormData, answers: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–æ–≤"""
    message = "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã!\n\n"
    message += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"

    question_number = 1
    for page in form_data.pages:
        for item in page.items:
            if not item.hidden:
                answer = answers.get(item.id, "–ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ")
                if item.type == 'enum' and item.items and isinstance(answer, list):
                    option_labels = []
                    for choice_id in answer:
                        option = next((opt for opt in item.items if opt.id == choice_id), None)
                        if option:
                            option_labels.append(option.label)
                    answer = ", ".join(option_labels) if option_labels else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

                message += f"{question_number}. {item.label}: {answer}\n"
                question_number += 1

    message += "\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
    message += "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é \"–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\"."

    return message


def get_keyboard_for_question(is_first: bool, is_last: bool) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    if is_first:
        return ['–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É']
    elif is_last:
        return ['–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã']
    else:
        return ['–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç']


def get_intro_form_header(title: str, company: str, questions_count: int):
    return (
        f"üìã –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–æ—Ä–º—É \"{title}\"\n"
        f"üè¢ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {company}'\n"
        f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}\n"
        f"\n–í–æ–ø—Ä–æ—Å—ã:\n"
    )
